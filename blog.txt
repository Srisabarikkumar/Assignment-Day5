Understanding Windows, Screens, and Documents in JavaScript
When working with JavaScript, understanding the concepts of windows, screens, and documents is crucial. These concepts 
refer to different aspects of the environment in which your JavaScript code operates, especially in the context of 
web development. Let's delve deeper into each of these concepts, their differences, and how they interact within the 
browser environment.

1. Document Object

The document object in JavaScript represents the web page loaded in the current browser window or tab. It serves 
as the entry point to the content displayed on the page and provides methods and properties to manipulate the content 
dynamically. Here are some key points about the document object:

DOM (Document Object Model): The document object is part of the DOM, which represents the structured representation of 
the HTML elements on the web page. It allows JavaScript to access and manipulate elements like paragraphs, headings, 
forms, and more.

Accessing Elements: You can access elements within the document using methods like getElementById, 
getElementsByClassName, getElementsByTagName, or newer methods like querySelector and querySelectorAll.

Manipulating Content: JavaScript can modify the content and structure of the document dynamically. This includes 
changing text, adding or removing elements, modifying styles, and handling events.

Event Handling: The document object facilitates event handling, allowing JavaScript to respond to user actions 
like clicks, input changes, and keyboard events.

Document Properties: It also provides properties that give information about the document itself, such as 
document.title, document.URL, document.body, etc.

2. Window Object

The window object in JavaScript represents the browser window or tab that contains the document object. It acts as 
the global object for the browser's JavaScript environment and provides various methods and properties related to 
the window itself and its interaction with the user. Here’s what you need to know about the window object:

Global Scope: Variables and functions defined in the global scope are accessible through the window object. For 
example, a function declared globally can be called using window.functionName.

Methods: The window object provides methods to interact with the browser window, such as open, close, alert, 
confirm, setTimeout, setInterval, etc.

Browser Information: Properties like window.location, window.navigator, window.history, and window.screen provide 
information about the browser's environment, location, history, and screen dimensions.

Frames and Iframes: In the context of frames and iframes, each frame or iframe has its own window object, allowing 
scripts to interact with and manipulate content within those frames.

3. Screen Object

The screen object in JavaScript represents the screen or monitor on which the browser window is being displayed. 
It provides information about the user's screen dimensions and other related properties. Key aspects of the screen 
object include:

Screen Dimensions: Properties like screen.width and screen.height provide the width and height of the screen in pixels.

Color Depth: The screen.colorDepth property indicates the color depth of the screen in bits per pixel.

Avail Width and Height: screen.availWidth and screen.availHeight give the available width and height of the screen 
for displaying content, excluding taskbars and other system UI.

Orientation: Some properties like screen.orientation provide information about the orientation of the screen 
(portrait or landscape) on devices that support it.

Differences and Relationships
Now that we have a clear understanding of each concept individually, let’s outline the key differences and 
relationships between window, document, and screen in JavaScript:

window vs document:

The window object is the top-level object representing the browser window or tab.
The document object is a property of window and represents the actual HTML content loaded in that window/tab.
window provides methods and properties for controlling the browser environment and interacting with the user.
document provides methods and properties for accessing and manipulating the content within the HTML page.

window vs screen:

window represents the entire browser window or tab.
screen represents the physical screen or monitor on which the browser window is displayed.
window provides methods and properties related to the browser environment, user interaction, and navigation.
screen provides information about the dimensions and capabilities of the physical screen or monitor.

document vs screen:

document represents the HTML content loaded in the browser window or tab.
screen represents the physical screen dimensions and properties.
document allows manipulation and interaction with the HTML elements and content on the page.
screen provides information about the display capabilities and dimensions but does not directly interact with the 
HTML content.

Conclusion
In conclusion, understanding the differences between window, document, and screen in JavaScript is fundamental for 
effective web development. Each represents a different aspect of the browser environment and provides specific 
functionalities and properties that can be leveraged to create dynamic and interactive web applications. By 
mastering these concepts, developers can manipulate content, control browser behavior, and optimize user experience 
based on screen dimensions and capabilities. Whether you are accessing elements within the DOM, opening new windows, 
or checking screen dimensions, a clear understanding of these concepts will empower you to write efficient and robust 
JavaScript code for web applications.